<?php

namespace App\Http\Livewire\Leads;

use App\Http\Livewire\FormMain;
use App\Models\Lead;

class Form extends FormMain
{
    protected $model = Lead::class;

    public $props = [
        'name' => null,
        'phone' => null,
        'email' => null,
        'message' => null,
        'interested_products' => null,
        'campaign_id' => null,
        'source' => null,
        'country_id' => null,
        'assigned_to' => null,
    ];

    protected function rules(): array
    {
        return [
            'props.name' => ['required', 'string'],
            'props.phone' => ['required'],
            'props.email' => ['nullable', 'email'],
            'props.campaign_id' => ['required', 'integer', 'exists:campaigns,id'],
            'props.source' => ['required', 'integer'],
            'props.country_id' => ['required', 'integer', 'exists:countries,id'],
            'props.assigned_to' => ['nullable', 'integer', 'exists:users,id'],
        ];
    }

    public function mount($params = [])
    {
        parent::mount($params); // TODO: Change the autogenerated stub
        $this->setTitle(__('Create', ['name' => __('Lead')]));

        if ($id = request()->route('lead')) {
            $this->setEditing($id);
            $this->setTitle(__('Edit', ['name' => __('Lead') . ' : ' . $this->editing->name]));
        }
    }

    protected function validationAttributes(): array
    {
        return [
            'props.name' => __('Name'),
            'props.phone' => __('Phone'),
            'props.email' => __('Email'),
            'props.campaign_id' => __('Campaign'),
            'props.source' => __('Source'),
            'props.country_id' => __('Country'),
            'props.assigned_to' => __('Assigned'),
        ];
    }

    protected function saveAndRedirect($route = '')
    {
        $route = 'leads.index';
        parent::saveAndRedirect($route); // TODO: Change the autogenerated stub
    }

    public function render()
    {
        return view('livewire.leads.form');
    }
}
