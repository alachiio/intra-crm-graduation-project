<?php

namespace App\Http\Livewire\Users;

use App\Enums\AccountStatusEnum;
use App\Enums\RoleEnum;
use App\Enums\UserTypeEnum;
use App\Http\Livewire\FormMain;
use App\Http\Livewire\FormWizard;
use App\Mail\AccountStatusChangeMail;
use App\Models\Permission;
use App\Models\Role;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Validation\Rule;
use Illuminate\Validation\Rules;
use Livewire\WithFileUploads;

class Form extends FormWizard
{
    use WithFileUploads;

    protected $model = User::class;
    public $props = [
        'id' => null,
        'f_name' => null,
        'l_name' => null,
        'user_id' => null,
        'email' => null,
        'password' => null,
        'phone' => null,
        'dob' => null,
        'current_team_id' => null,
        'account_status' => null,
    ];

    public $files = [
        'profile_photo_path' => null,
    ];

    public $role = null;

    public $permissions = [];

    public $updatePassword = false;

    protected function rules(): array
    {
        $rules = [
            'props.f_name' => [
                'required',
                'string',
            ],
            'props.l_name' => [
                'required',
                'string',
            ],
            'props.email' => [
                'required',
                'email',
                Rule::unique((new $this->model)->getTable(), 'email')->whereNull('deleted_at')->ignore($this->editing->id ?? ":id")
            ],
            'props.dob' => [
                'required',
                'date'
            ],
            'props.phone' => [
                'required',
                Rule::unique((new $this->model)->getTable(), 'phone')->whereNull('deleted_at')->ignore($this->editing->id ?? ":id")
            ],
            'role' => [
                'required',
                'integer',
                'exists:roles,id'
            ],
            'permissions' => ['nullable']
        ];

        if (!$this->editing or $this->updatePassword) {
            $rules['props.password'] = [
                'required',
                'confirmed',
                Rules\Password::defaults(),
            ];
        }
        return $rules;
    }

    protected function setTabs()
    {
        $this->tabs = [
            __('Personal Information'),
            __('Permissions'),
        ];
    }

    public function mount($params = [])
    {
        parent::mount($params); // TODO: Change the autogenerated stub
        $this->setTitle(__('Create', ['name' => __('User')]));

        if ($id = request()->route('user')) {
            $this->setEditing($id);
            $this->role = $this->editing->roles[0]->id;
            $this->permissions = $this->editing->permissions->pluck('name')->toArray();
            $this->setTitle(__('Edit', ['name' => __('User') . ' : ' . $this->editing->name]));
        } else {
            $this->updatePassword = true;
        }
    }

    public function toggleUpdatePassword()
    {
        $this->updatePassword = !$this->updatePassword;
    }

    public function setEditing($id)
    {
        $this->editing = $this->model::find($id);
        $this->fillEditingProps();
        $this->props['password'] = null;
    }

    protected function beforeCreate($data)
    {
        $data['password'] = Hash::make($data['password']);

        if (auth()->user()->hasRole('team_leader')) {
            $data['current_team_id'] = auth()->user()->team->id;
        }

        return $data;
    }

    protected function beforeUpdate($data)
    {
        if (!$data['password']) {
            $data = Arr::except($data, ['password']);
        } else {
            $data['password'] = Hash::make($data['password']);
        }

        if ($this->isDirty('account_status')) {
            Mail::to($data['email'])->send(new AccountStatusChangeMail($data['account_status']));
        }

        return $data;
    }

    protected function afterCreateOrUpdate($row)
    {
        if (auth()->user()->hasRole('team_leader')) {
            $this->role = RoleEnum::consultant->value;
        } elseif ($this->role == RoleEnum::team_leader->value and !$row->team) {
            $row->team()->create();
        }
        $row->syncRoles([RoleEnum::from($this->role)->name]);
        $this->givePermissions($row);
    }

    protected function afterCreate($row)
    {
        event(new Registered($row));
    }

    protected function validationAttributes(): array
    {
        return [
            'props.f_name' => __('First Name'),
            'props.l_name' => __('Last Name'),
            'props.email' => __('Email'),
        ];
    }

    protected function saveAndRedirect($route = '')
    {
        $route = 'users.index';
        parent::saveAndRedirect($route); // TODO: Change the autogenerated stub
    }

    protected function updatedRole($value)
    {
        if (!$this->permissions) {
            $this->permissions = Role::find($value)->permissions->pluck('name')->toArray();
        }
    }

    public function givePermissions($user)
    {
        $permissions = $this->permissions;
        $permissionsData = Arr::map($this->permissions, function ($item, $key) use ($permissions) {
            return $permissions[$key] = ['name' => $item, 'guard_name' => 'web'];
        });

        Permission::upsert($permissionsData, ['name'], []);

        $user->syncPermissions(Permission::whereIn('name', $permissions)->get());
    }

    public function render()
    {
        return view('livewire.users.form');
    }
}
