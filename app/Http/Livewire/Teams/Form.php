<?php

namespace App\Http\Livewire\Teams;

use App\Http\Livewire\FormMain;
use App\Models\Role;
use App\Models\Team;
use App\Models\User;

class Form extends FormMain
{
    protected $model = Team::class;

    public $props = [
        'leader_id' => null,
    ];

    public $leaders;

    public $consultants;

    public $members = [];

    protected function rules(): array
    {
        return [
            'props.leader_id' => ['required', 'integer', 'exists:users,id']
        ];
    }

    protected function afterCreateOrUpdate($row)
    {
        User::where('current_team_id', $row->id)->whereNotIn('id', $this->members)->update([
            'current_team_id' => null
        ]);

        User::whereIn('id', $this->members)->update([
            'current_team_id' => $row->id,
        ]);
    }

    public function mount($params = [])
    {
        parent::mount($params); // TODO: Change the autogenerated stub
        $this->setTitle(__('Create', ['name' => __('Team')]));
        $this->leaders = Role::where('name', 'team_leader')->first()->users->pluck('name', 'id');
        $this->consultants = Role::where('name', 'consultant')->first()->users->pluck('name', 'id');
        if ($id = request()->route('team')) {
            $this->setEditing($id);
            $this->members = $this->editing->users->pluck('id')->toArray();
            $this->setTitle(__('Edit', ['name' => __('Team') . ' Of ' . $this->editing->leader->name]));
        }
    }

    protected function saveAndRedirect($route = '')
    {
        $route = 'teams.index';
        parent::saveAndRedirect($route); // TODO: Change the autogenerated stub
    }

    public function render()
    {
        return view('livewire.teams.form');
    }
}
